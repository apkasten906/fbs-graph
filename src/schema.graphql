# GraphQL SDL for FBS Graph

scalar DateTime

enum GamePhase { PRESEASON REGULAR POSTSEASON }
enum GameResult { TBD HOME_WIN AWAY_WIN TIE CANCELLED NO_CONTEST }
enum GameType { CONFERENCE NON_CONFERENCE BOWL PLAYOFF CHAMPIONSHIP }
enum PollType { AP COACHES CFP CUSTOM }
enum Division { FBS }

type Conference {
  id: ID!
  name: String!
  shortName: String!
  division: Division!
  teams: [Team!]!
  crossConferenceEdges(season: Int!): Int!
  averageSpPlus(season: Int): Float
}

type Team {
  id: ID!
  name: String!
  shortName: String!
  conference: Conference!
  seasons: [TeamSeason!]!
  neighbors(season: Int!): [Team!]!
  degree(season: Int!): Int!
}

type TeamSeason {
  id: ID!
  season: Int!
  team: Team!
  coach: String
  spPlus: Float
  returningProduction: Float
  record: Record
  polls: [PollSnapshot!]!
  games: [Game!]!
}

type Record {
  wins: Int!
  losses: Int!
  ties: Int!
  confWins: Int!
  confLosses: Int!
}

type PollSnapshot {
  poll: PollType!
  week: Int!
  rank: Int!
  date: DateTime!
}

type Game {
  id: ID!
  season: Int!
  week: Int
  phase: GamePhase!
  date: DateTime
  type: GameType!
  home: Team!
  away: Team!
  homeConference: Conference!
  awayConference: Conference!
  isConferenceGame: Boolean!
  result: GameResult!
  homePoints: Int
  awayPoints: Int
  leverage: Float!
  rankWeightHome: Float
  rankWeightAway: Float
  bridgeBoost: Float
  timingBoost: Float
}

type ConferenceConnectivity {
  season: Int!
  a: Conference!
  b: Conference!
  edges: Int!
  averageLeverage: Float!
}

type PlayoffContender {
  team: Team!
  rank: Int
  record: Record
  resumeScore: Float!
  leverageIndex: Float!
  upcomingGames: [Game!]!
  nextGame: Game
}

type PlayoffPreview {
  season: Int!
  generatedAt: DateTime!
  leverageThreshold: Float!
  remainingHighLeverageGames: [Game!]!
  contenders: [PlayoffContender!]!
}

type Query {
  conferences: [Conference!]!
  conference(id: ID!): Conference
  teams(conferenceId: ID, season: Int): [Team!]!
  team(id: ID!): Team
  games(season: Int!, week: Int, teamId: ID, conferenceId: ID, type: GameType, playedOnly: Boolean): [Game!]!
  essentialMatchups(season: Int!, week: Int, limit: Int = 50, includeConferenceGames: Boolean = true): [Game!]!
  conferenceConnectivity(season: Int!): [ConferenceConnectivity!]!
  playoffPreview(season: Int!, limit: Int = 12, gameLimit: Int = 12, leverageThreshold: Float = 0.75): PlayoffPreview!
}

input ConferenceInput {
  id: ID!
  name: String!
  shortName: String!
  division: Division = FBS
}

input TeamInput {
  id: ID!
  name: String!
  shortName: String!
  conferenceId: ID!
}

input TeamSeasonInput {
  id: ID!
  teamId: ID!
  season: Int!
  coach: String
  spPlus: Float
  returningProduction: Float
  record: RecordInput
}

input RecordInput {
  wins: Int!
  losses: Int!
  ties: Int!
  confWins: Int!
  confLosses: Int!
}

input PollSnapshotInput {
  teamSeasonId: ID!
  poll: PollType!
  week: Int!
  rank: Int!
  date: DateTime!
}

input GameInput {
  id: ID!
  season: Int!
  week: Int
  phase: GamePhase!
  date: DateTime
  type: GameType!
  homeTeamId: ID!
  awayTeamId: ID!
  result: GameResult!
  homePoints: Int
  awayPoints: Int
}
